import{_ as a,c as i,o as l,a1 as s}from"./chunks/framework.BoUexNPV.js";const e="/vite_press_blog/assets/%E6%8E%92%E8%A1%8C%E6%A6%9C.3T3iAmnU.png",t="/vite_press_blog/assets/JavaSE%E4%BD%93%E7%B3%BB.DAUamM7z.png",o="/vite_press_blog/assets/Oracle%E5%AE%98%E7%BD%91.BkuJ2ugK.png",n="/vite_press_blog/assets/Oracle%E4%BA%A7%E5%93%81.CKeAEuom.png",r="/vite_press_blog/assets/%E4%B8%8B%E8%BD%BDJava.Ny4vjU1K.png",c="/vite_press_blog/assets/Java%E7%89%88%E6%9C%AC.BMmwLbVB.png",p="/vite_press_blog/assets/Java8.CBxB_Kve.png",v="/vite_press_blog/assets/%E6%89%A7%E8%A1%8C%E5%AE%89%E8%A3%85.BXXFsCJg.png",J="/vite_press_blog/assets/JDK%E7%BB%84%E4%BB%B6.Eef8HVlE.png",d="/vite_press_blog/assets/%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.BJhmfh17.png",h="/vite_press_blog/assets/%E5%AE%89%E8%A3%85%E8%BF%9B%E5%BA%A6%E5%B1%95%E7%A4%BA.m-1vQS06.png",E="/vite_press_blog/assets/JRE%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84.D-5Mhzit.png",u="/vite_press_blog/assets/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.FTuacxhv.png",k="/vite_press_blog/assets/JDK%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.D6eVc-4K.png",b="/vite_press_blog/assets/%E9%AB%98%E7%BA%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE.CbkW4fFG.png",g="/vite_press_blog/assets/%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7-%E9%AB%98%E7%BA%A7.QBc4RVwb.png",_="/vite_press_blog/assets/JAVA_HOME.C3pxwN1S.png",m="/vite_press_blog/assets/CLASS_PATH.BTXDE2cO.png",C="/vite_press_blog/assets/PATH.CI4qyVlT.png",A="/vite_press_blog/assets/%E8%BF%90%E8%A1%8C.Dl_w3SHF.png",q="/vite_press_blog/assets/CMD.CO45ZlfC.png",B="/vite_press_blog/assets/JavaVersion.BvKc1CQ5.png",D="/vite_press_blog/assets/JavaC.XYSGfCMg.png",M="/vite_press_blog/assets/HelloJava.ePgJJka5.png",j="/vite_press_blog/assets/Java%E5%90%8E%E7%BC%80%E5%90%8D.rt7dikkS.png",V="/vite_press_blog/assets/%E6%89%93%E5%BC%80CMD.CwVpQwGu.png",x="/vite_press_blog/assets/%E8%BF%90%E8%A1%8Cjavac.sD0ug7zK.png",f="/vite_press_blog/assets/%E7%94%9F%E6%88%90class%E6%96%87%E4%BB%B6.Du2GKx7V.png",y="/vite_press_blog/assets/%E8%BF%90%E8%A1%8CJava.D8ssgmUo.png",P="/vite_press_blog/assets/Java%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.CW3emFmB.png",K="/vite_press_blog/assets/Java%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F.61ymHKzC.png",w="/vite_press_blog/assets/%E8%81%94%E7%B3%BB.CyO9e1yE.png",S="/vite_press_blog/assets/%E8%81%94%E7%B3%BB2.BJKEhr2m.png",z=JSON.parse('{"title":"Java入门基础及环境搭建","description":"","frontmatter":{},"headers":[],"relativePath":"java_first","filePath":"src/java/Java入门基础及环境搭建.md","lastUpdated":1719914133000}'),F={name:"java_first"},R=s('<h1 id="java入门基础及环境搭建" tabindex="-1">Java入门基础及环境搭建 <a class="header-anchor" href="#java入门基础及环境搭建" aria-label="Permalink to &quot;Java入门基础及环境搭建&quot;">​</a></h1><h3 id="java是什么" tabindex="-1">Java是什么？ <a class="header-anchor" href="#java是什么" aria-label="Permalink to &quot;Java是什么？&quot;">​</a></h3><ul><li><code>Java</code>是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有<code>功能强大</code>和<code>简单易用</code>两个特征。</li><li>Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。</li><li>Java具有<code>简单性</code>、<code>面向对象</code>、<code>分布式</code>、<code>健壮性</code>、<code>安全性</code>、<code>平台独立与可移植性</code>、<code>多线程</code>、<code>动态性</code>等特点。</li><li>Java可以<code>编写桌面应用程序</code>、<code>Web应用程序</code>、<code>分布式系统</code>和<code>嵌入式系统应用程序</code>等。</li><li><a href="https://baike.baidu.com/item/Java/85979?fr=ge_ala#1" target="_blank" rel="noreferrer">发展历程</a></li></ul><p><img src="'+e+'" alt="排行榜"></p><h3 id="java体系" tabindex="-1">Java体系 <a class="header-anchor" href="#java体系" aria-label="Permalink to &quot;Java体系&quot;">​</a></h3><ul><li>JavaSE <ul><li>Java SE（Java Platform Standard Edition，Java 平台标准版）以前称为 J2SE，它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java EE 提供基础，如 Java 语言基础、JDBC 操作、I/O 操作、网络通信以及多线程等技术。图 1 所示为 Java SE 的体系结构。<br><img src="'+t+'" alt="JavaSE体系"></li></ul></li><li>JavaEE <ul><li>Java EE（Java Platform Enterprise Edition，Java 平台企业版）以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（Service Oriented Architecture，SOA）和 Web 2.0 应用程序。</li></ul></li><li>JavaME <ul><li>Java ME（Java Platform Micro Edition，Java 平台微型版）以前称为 J2ME，也叫 K-JAVA。 Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。</li><li>Java ME 包括灵活的用户界面、健壮的安全模型、丰富的内置网络协议以及对可以动态下载的联网和离线应用程序。基于 Java ME 规范的应用程序 只需编写一次就可以用于许多设备，而且可以利用每个设备的本机功能。</li></ul></li></ul><h3 id="java语言的特点" tabindex="-1">Java语言的特点 <a class="header-anchor" href="#java语言的特点" aria-label="Permalink to &quot;Java语言的特点&quot;">​</a></h3><p>Java 语言的风格很像 C 语言和 C++ 语言，是一种纯粹的面向对象语言，它继承了 C++ 语言面向对象的技术核心，但是拋弃了 C++ 的一些缺点，比如说容易引起错误的指针以及多继承等，同时也增加了垃圾回收机制，释放掉不被使用的内存空间，解决了管理内存空间的烦恼。</p><p>Java 语言是一种分布式的面向对象语言，具有面向对象、平台无关性、简单性、解释执行、多线程、安全性等很多特点，下面针对这些特点进行逐一介绍。</p><ol><li>面向对象 Java 是一种面向对象的语言，它对对象中的类、对象、继承、封装、多态、接口、包等均有很好的支持。为了简单起见，Java 只支持类之间的单继承，但是可以使用接口来实现多继承。使用 Java 语言开发程序，需要采用面向对象的思想设计程序和编写代码。</li><li>平台无关性 平台无关性的具体表现在于，Java 是“一次编写，到处运行（Write Once，Run any Where）”的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。 Java 语言使用 Java 虚拟机机制屏蔽了具体平台的相关信息，使得 Java 语言编译的程序只需生成虚拟机上的目标代码，就可以在多种平台上不加修改地运行。</li><li>简单性 Java 语言的语法与 C 语言和 C++ 语言很相近，使得很多程序员学起来很容易。对 Java 来说，它舍弃了很多 C++ 中难以理解的特性，如操作符的重载和多继承等，而且 Java 语言不使用指针，加入了垃圾回收机制，解决了程序员需要管理内存的问题，使编程变得更加简单。</li><li>解释执行 Java 程序在 Java 平台运行时会被编译成字节码文件，然后可以在有 Java 环境的操作系统上运行。在运行文件时，Java 的解释器对这些字节码进行解释执行，执行过程中需要加入的类在连接阶段被载入到运行环境中。</li><li>多线程 Java 语言是多线程的，这也是 Java 语言的一大特性，它必须由 Thread 类和它的子类来创建。Java 支持多个线程同时执行，并提供多线程之间的同步机制。任何一个线程都有自己的 run() 方法，要执行的方法就写在 run() 方法体内。</li><li>分布式 Java 语言支持 Internet 应用的开发，在 Java 的基本应用编程接口中就有一个网络应用编程接口，它提供了网络应用编程的类库，包括 URL、URLConnection、Socket 等。Java 的 RIM 机制也是开发分布式应用的重要手段。</li><li>健壮性 Java 的强类型机制、异常处理、垃圾回收机制等都是 Java 健壮性的重要保证。对指针的丢弃是 Java 的一大进步。另外，Java 的异常机制也是健壮性的一大体现。</li><li>高性能 Java 的高性能主要是相对其他高级脚本语言来说的，随着 JIT（Just in Time）的发展，Java 的运行速度也越来越高。</li><li>安全性 Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防止恶意代码的攻击。除了 Java 语言具有许多的安全特性以外，Java 还对通过网络下载的类增加一个安全防范机制，分配不同的名字空间以防替代本地的同名类，并包含安全管理机制。 Java 语言的众多特性使其在众多的编程语言中占有较大的市场份额，Java 语言对对象的支持和强大的 API 使得编程工作变得更加容易和快捷，大大降低了程序的开发成本。Java 的“一次编写，到处执行”正是它吸引众多商家和编程人员的一大优势。</li></ol><h3 id="java-jdk下载与安装教程" tabindex="-1">Java JDK下载与安装教程 <a class="header-anchor" href="#java-jdk下载与安装教程" aria-label="Permalink to &quot;Java JDK下载与安装教程&quot;">​</a></h3><p>JDK 是一种用于构建在 Java 平台上发布的应用程序、Applet 和组件的开发环境，即编写 Java 程序必须使用 JDK，它提供了编译和运行 Java 程序的环境。 在安装 JDK 之前，首先要到 <a href="https://www.oracle.com/" target="_blank" rel="noreferrer">Oracle 网站</a>获取 JDK 安装包。JDK 安装包被集成在 Java SE 中，因此下载 Java SE 即可，具体步骤如下。</p><ol><li>在浏览器中输入 www.oracle.com，打开 Oracle 公司的官方网站。在首页的栏目中选择 Downloads 选项，如图所示。<br><img src="'+o+'" alt="Oracle官网"><br> 在页面导航栏<code>产品</code>中选择 Java选项，如图所示。<br><img src="'+n+'" alt="Oracle产品"><br> 点击<code>下载Java</code>,如图所示：<br><img src="'+r+'" alt="下载Java"> 选择对应版本，点击直链下载Java程序包，如图所示： <img src="'+c+'" alt="Java版本"></li><li>这里我们下载<code>Java8</code>的安装包，如图：<br><img src="'+p+'" alt="Java8"></li><li>下载完成后，双击下载的Java程序包执行安装。<br><img src="'+v+'" alt="执行安装"></li><li>单击“下一步”按钮，打开定制安装对话框。选择安装的 JDK 组件。<br><img src="'+J+'" alt="JDK组件"></li><li>单击“更改”按钮，可以更改 JDK 的安装路径。更改完成之后，单击“下一步”按钮，打开安装进度界面。<br><img src="'+d+'" alt="修改安装路径"><img src="'+h+'" alt="安装进度展示"></li><li>在安装过程中会打开如图所示的目标文件夹对话框，选择 JRE 的安装路径，这里使用默认值。也可根据JDK安装路径更改当前安装路径。<br><img src="'+E+'" alt="JRE安装路径.png"></li><li>单击“下一步”按钮，安装 JRE。当 JRE 安装完成之后，将打开 JDK 安装完成界面。<br><img src="'+u+'" alt="安装完成.png"></li><li>安装完成后，在安装位置打开 JDK 的文件夹，内容和目录结构如图所示。<br><img src="'+k+'" alt="JDK目录结构.png"></li></ol><blockquote><p>JDK 安装目录下具有多个子目录和一些网页文件，其中重要目录和文件的说明如下。</p><ul><li><code>bin</code>：提供 JDK 工具程序，包括 javac、java、javadoc、appletviewer 等可执行程序。</li><li><code>include</code>：存放用于本地访问的文件。</li><li><code>jre</code>：存放 Java 运行环境文件。</li><li><code>lib</code>：存放 Java 的类库文件，工具程序实际上使用的是 Java 类库。JDK 中的工具程序，大多也由 Java 编写而成。</li><li><code>src.zip</code>：Java 提供的 API 类的源代码压缩文件。如果需要查看 API 的某些功能是如何实现的，可以査看这个文件中的源代码内容。</li></ul></blockquote><h3 id="jdk环境变量配置" tabindex="-1">JDK环境变量配置 <a class="header-anchor" href="#jdk环境变量配置" aria-label="Permalink to &quot;JDK环境变量配置&quot;">​</a></h3><p>下面以 Windows 11 系统为例，配置环境变量的具体步骤如下。</p><ol><li>从桌面上右击<code>此电脑</code>图标，从快捷菜单中选择<code>属性</code>，在打开的设置窗口中找到<code>高级系统设置</code>。如图所示： <img src="'+b+'" alt="高级系统设置"></li><li>弹出<code>系统属性-高级</code>，点击<code>环境变量</code>，如图： <img src="'+g+'" alt="系统属性-高级"></li><li>新建<code>系统变量：JAVA_HOME</code>，值为JDK安装路径。 <img src="'+_+'" alt="JAVA_HOME"></li><li>新建<code>系统变量：CLASS_PATH</code>，值为<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code>。 <img src="'+m+'" alt="CLASS_PATH"></li><li>编辑<code>系统变量：Path</code>，在后面新增值<code>%JAVA_HOME%\\bin</code> 。 <img src="'+C+'" alt="PATH"></li><li>JDK 安装和配置完成后，可以测试其是否能够正常运行。使用<code>Win</code>+<code>R</code>组合快捷键打开<code>运行</code>对话框，在打开的“运行”对话框中输入 cmd 命令，按 Enter 键进入到 DOS 环境下。 <img src="'+A+'" alt="运行"><img src="'+q+'" alt="CMD"> 在命令提示符后输入并执行<code>java -version</code>命令，系统如果输出类似图所示的 JDK 版本信息，说明 JDK 已经配置成功。 <img src="'+B+'" alt="JavaVersion"> 或者输入<code>Javac</code>命令，输出以下信息，也可说明JDK配置成功。 <img src="'+D+`" alt="JavaC"></li></ol><h3 id="使用记事本编写运行java程序" tabindex="-1">使用记事本编写运行Java程序 <a class="header-anchor" href="#使用记事本编写运行java程序" aria-label="Permalink to &quot;使用记事本编写运行Java程序&quot;">​</a></h3><ol><li><p>新建一个空白文本文档，输入一下内容</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 第一个Java程序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloJava</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 打印 HelloJava</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HelloJava&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }     </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>如图： <img src="`+M+'" alt="HelloJava"> 将文件后缀名更改为<code>.java</code>，如图所示： <img src="'+j+'" alt="Java后缀名"></p><blockquote><p>代码解析：</p><ul><li>public:Java关键字、修饰符，表示所修饰的类、方法或属性是公共的。</li><li>class：Java关键字，用于声明一个类，其后所跟的是类名称，类名要与文件名相同。</li><li>static： Java关键字，表示所修饰的方法是一个静态方法。</li><li>void: Java关键字，表示该方法没有返回值。</li><li>main(): 方法名，程序入口，最先开始的执行方法。</li><li>/* */: 块状注释区域。</li><li>//: 单行注释</li></ul></blockquote></li><li><p>编译和运行 在当前文件所在目录打开CMD命令窗口，如图所示： <img src="'+V+'" alt=""> 运行<code>javac HelloJava.java</code>命令，此命令是编译Java程序，生成对应的字节码文件。 <img src="'+x+'" alt=""><img src="'+f+'" alt=""> 生成class文件后，执行<code>java HelloJava</code>命令，会打印出来<code>HelloJava</code>,我们在程序中要执行的操作。 <img src="'+y+'" alt=""></p></li><li><p>在编译运行中可能出现的错误</p><blockquote><ul><li><code>Error:cannot read:HelloJava.java javac</code>:工具程序找不到指定的 java 文件，需要检查文件是否存储在当前目录中，或文件名是否错误</li><li><code>HelloJava.java:4:class HelloJava is public,should be declared in a file named MyApplication.java</code>:源文件中类的名称和源文件名称不符，需要确定源文件名称和类名称是否相同</li><li><code>HelloJava.java:6:cannot find symbol</code>:源程序文件中某些代码部分输入错了，最常产生的原因可能是没有注意到字母的大小写</li><li><code>Javac 不是内部或外部命令、可执行程序或批量文件</code>:path 设置有误或没有在 path 系统变量中加入 JDK 的 bin 目录</li><li><code>Exception in thread “main” java.lang.NoClassDefFoundError</code>:Java 工具程序找不到所指定的 .class 类，需要确定指定的类是否存储在当前目录中，名称是否正确</li><li><code>Exception in thread “main” java.lang.NoSuchMetliodError:main</code>:没有指定 Java 程序的入口。Java 工具程序指定的类必须有一个程序入口，也就是必须包括 main(String args[]) 这个方法</li></ul></blockquote></li></ol><h3 id="java编程规范" tabindex="-1">Java编程规范 <a class="header-anchor" href="#java编程规范" aria-label="Permalink to &quot;Java编程规范&quot;">​</a></h3><p>编程规范是对编程的一种约定，主要作用是增强代码的可读性和可维护性，便于代码重用。</p><blockquote><p>首先要求程序中的各个要素都遵守命名规则，然后在编码中严格按照编码格式编写代码。命名规则包括以下几点。</p><ul><li>包的名称由一个小写字母序列组成。</li><li>类的名称由大写字母开头，其他字母都由小写的单词组成。</li><li>类的实例的名称由一个小写字母开头，后面的单词由大写字母开头。</li><li>常量的名称都大写，并且指出完整含义。</li><li>参数的名称无其他具体规定。</li><li>数组的命名使用“类型[] 数组名”的形式。</li></ul></blockquote><blockquote><p>另外，编码格式规定如下。</p><ul><li>程序最开始编写导入包和类语句，即 import 语句。import 语句可以有多行，编写完 import 语句后空一行。</li><li>定义 public 类，顶格书写。类的主体左括号“{”不换行书写，右括号“}”顶格书写。</li><li>定义 public 类中的变量，缩进书写。</li><li>定义方法用缩进书写，方法的左括号“{”不换行书写，右括号“}”和方法首行第一个字符对齐。方法体要再次缩进书写，最后一个变量定义和第一个方法定义之间、方法和方法之间最好空一行。</li></ul></blockquote><blockquote><p>提示：在单一的语句后有“;”，在一对括号“{}“之外无“;”。方法调用名和紧跟在其后的左括号“(”无空格，该左括号和其后的标识符之间无空格。多个参数之间的逗号和前一个参数紧靠，与后一个参数空一格。</p></blockquote><h3 id="java程序的运行过程" tabindex="-1">Java程序的运行过程 <a class="header-anchor" href="#java程序的运行过程" aria-label="Permalink to &quot;Java程序的运行过程&quot;">​</a></h3><p>Java 程序的运行必须经过编写、编译和运行 3 个步骤。</p><ol><li>编写：是指在 Java 开发环境中进行程序代码的输入，最终形成后缀名为 .java 的 Java 源文件。</li><li>编译：是指使用 Java 编译器对源文件进行错误排査的过程，编译后将生成后缀名为 .class 的字节码文件，不像C语言那样生成可执行文件。</li><li>运行：是指使用 Java 解释器将字节码文件翻译成机器代码，执行并显示结果。</li></ol><p>Java程序的执行流程如图所示： <img src="'+P+'" alt=""></p><p>字节码文件是一种和任何具体机器环境及操作系统环境无关的中间代码。它是一种二进制文件，是 Java 源文件由 Java 编译器编译后生成的目标代码文件。编程人员和计算机都无法直接读懂字节码文件，它必须由专用的 Java 解释器来解释执行，因此 Java 是一种在编译基础上进行解释运行的语言。</p><p>Java 解释器负责将字节码文件翻译成具体硬件环境和操作系统平台下的机器代码，以便执行。因此 Java 程序不能直接运行在现有的操作系统平台上，它必须运行在被称为 Java 虚拟机的软件平台之上。</p><p>Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java 解释器是 Java 虚拟机的一部分。在运行 Java 程序时，首先会启动 JVM，然后由它来负责解释执行 Java 的字节码程序，并且 Java 字节码程序只能运行于 JVM 之上。这样利用 JVM 就可以把 Java 字节码程序和具体的硬件平台以及操作系统环境分隔开来，只要在不同的计算机上安装了针对特定平台的 JVM，Java 程序就可以运行，而不用考虑当前具体的硬件平台及操作系统环境，也不用考虑字节码文件是在何种平台上生成的。</p><p>JVM 把这种不同软、硬件平台的具体差别隐藏起来，从而实现了真正的二进制代码级的跨平台移植。JVM 是 Java 平台架构的基础，Java 的跨平台特性正是通过在 JVM 中运行 Java 程序实现的。</p><p>Java的工作方式如图所示： <img src="'+K+`" alt=""></p><p>Java 语言这种“一次编写，到处运行”的方式，有效地解决了目前大多数高级程序设计语言需要针对不同系统来编译产生不同机器代码的问题，即硬件环境和操作平台的异构问题，大大降低了程序开发、维护和管理的开销。</p><p>提示：Java 程序通过 JVM 可以实现跨平台特性，但 JVM 是不跨平台的。也就是说，不同操作系统之上的 JVM 是不同的，Windows 平台之上的 JVM 不能用在 Linux 平台，反之亦然。</p><h3 id="java是如何实现跨平台的-原理是什么" tabindex="-1">Java是如何实现跨平台的，原理是什么？ <a class="header-anchor" href="#java是如何实现跨平台的-原理是什么" aria-label="Permalink to &quot;Java是如何实现跨平台的，原理是什么？&quot;">​</a></h3><ol><li><p>跨平台</p><blockquote><p>概念： 所谓的平台，其实就是指计算机操作系统，比如windows、linux、mac系统。 而跨平台则是软件开发中的一个重要概念，即软件不依赖某个具体的操作系统，也不依赖某个具体的硬件环境。 在一个操作系统下开发的应用，放到另一个操作系统下依然可以运行。 通俗地说，我们开发出来一个软件，可以同时在windows、linux、mac等系统中运行，这就是”跨平台“！</p></blockquote><blockquote><p>特性： Java语言具有”跨平台“的特性，是相对于其他编程语言来说的。 这是因为Java语言编写出的应用程序，只需要编写一次代码，就可以在不同的系统上运行。 而其他的一些高级语言，比如C语言写出的代码，如果想在不同的平台上运行，需要编译成针对不同系统平台的目标代码。 比如在Windows系统中编译的C语言程序，在Linux下是不能运行的，需要重新编译成Linux下的目标程序。反之，在Linux下编译的C语言程序，在Windows下也不能运行。</p></blockquote></li><li><p>JVM虚拟机</p><blockquote><p>概念：<br> JVM：Java Virtual Machine。 这是一种抽象的计算机，是在真实的计算机中仿真模拟出各种计算机的功能。 简单地说，我们可以把JVM理解成是一个”软件“，该软件相当于一个小型的”计算机系统“。 虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还有各种指令系统。 Java虚拟机屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码(字节码)，就可以在多种操作系统平台上不加修改地运行。<br> JVM最核心的一个模块叫Java解释器，相当于是计算机的“CPU”，可以将.class字节码解释成适合不同操作系统的可执行代码。 Java解释器实际上就是特定系统平台下的一个应用程序，只要实现了这个解释器程序，Java字节码就能通过该解释器在该平台下运行，这是Java之所以可以实现跨平台的根本原因所在！<br> 但目前并不是所有的操作系统都有自己对应的Java解释器，所以Java程序并不能在所有的操作系统下运行。 它只能在已实现了Java解释器的平台中运行，比如windows、linux、mac等主流平台。</p></blockquote><blockquote><p>特征：目前商用的Java虚拟机有很多种，其中比较主流的有如下几个：</p><ul><li>适用于JavaSE/JavaEE平台的主流JVM(按流行程度递减)：HotSpot VM、J9 VM、Zing VM。</li><li>适用于JavaME平台的主流JVM：CLDC-HI、J9 VM；</li><li>适用于Android系统的主流JVM：Dalvik VM、ART VM；</li><li>其他。</li></ul></blockquote></li><li><p>跨平台实现原理</p><ol><li><p>C语言的编译过程</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flowchart TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[&quot;c源程序（扩展名为.c）&quot;]--c编译程序--&gt;B[&quot;Windows可执行文件（扩展名.exe）&quot;]--执行--&gt;C[Windows操作系统]</span></span></code></pre></div><p>从上图可知，在windows系统下，我们编写的C语言源码文件后缀是.c，在windows平台下进行编译会生成后缀名为.exe的可执行文件，经常安装软件的同学应该对这个.exe后缀不陌生。生成.exe文件后，就可以在windows系统中运行了。 但是如果我们换一个linux操作系统，即使是同样的C语言代码，在没有进行重新编译的前提下，是无法直接运行的。windows里的.exe可执行文件，在linux中是不能执行的！所以我们需要将之前的C语言程序，针对linux平台重新编译，生成适合于linux平台的可执行文件才行。</p></li><li><p>Java语言的编译过程</p></li></ol><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Java源代码] --编译--&gt; B[&quot;Java字节码（可跨平台）&quot;] --运行--&gt; C[JVM \\n Java虚拟机]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[Windows]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; E[Linux]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; F[Mac]</span></span></code></pre></div><p>根据上图，并结合之前所述的Java编程步骤，我们知道Java编程要经历编写、编译、执行这三个核心步骤。而在执行之前，我们会把.java源码文件编译成.class字节码文件，这里的.java文件、.class文件和具体的操作系统无关，无论是windows/linux/mac等任何系统，这些文件都是一样的。</p><ol start="3"><li>JVM跨平台实现机制 JVM之所以可以实现跨平台，原理其实很简单！其实JVM本身并没有实现跨平台，也就是说不同的操作系统中，需要不同的JVM虚拟机。如图所示：</li></ol><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Java程序] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; B[Windows版本的JVM]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; C[Linux版本的JVM]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; D[Mac版本的JVM]</span></span></code></pre></div></li><li></li></ol><h3 id="java中jvm、jre和jdk三者有什么区别和联系" tabindex="-1">Java中JVM、JRE和JDK三者有什么区别和联系？ <a class="header-anchor" href="#java中jvm、jre和jdk三者有什么区别和联系" aria-label="Permalink to &quot;Java中JVM、JRE和JDK三者有什么区别和联系？&quot;">​</a></h3><p>任何语言或者软件的运行都需要环境。就像人要生活在空气中，鱼要活在水中，喜阴植物就不能放在阳光下暴晒一样，任何对象个体的存在都离不开其所需要的环境，编程语言亦是一样的。</p><p>Java 语言的开发运行，也离不开 Java 语言的运行环境 JRE。没有 JRE 的支持，Java 语言便无法运行。当然，如果还想编译 Java 程序，搞搞小开发的话，JRE 是明显不够了，这时候就需要 JDK。</p><p>其实啊，JDK 就是 JRE 加上一些常用工具组成的。JDK 不仅能运行已经被编译好了的 Java 程序，还能支持我们编译 Java 程序（JDK=JRE+各种工具）。</p><p>在《JVM及Java跨平台原理》一节中，我们学习了 Java 虚拟机 JVM。那么 JDK，JVM 和 JRE，那他们三个有什么区别呢？又有什么联系呢？如果你学到这里产生这样一个疑问，我想说，你到目前为止，学的很不错！那现在为你们整理一下三者的关系和区别吧：</p><ul><li>JDK（Java Development Kid，Java 开发开源工具包），是针对 Java 开发人员的产品，是整个 Java 的核心，包括了 Java 运行环境 JRE、Java 工具和 Java 基础类库。</li><li>JRE（Java Runtime Environment，Java 运行环境）是运行 JAVA 程序所必须的环境的集合，包含 JVM 标准实现及 Java 核心类库。</li><li>JVM（Java Virtual Machine，Java 虚拟机）是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言写作的软件程序。</li></ul><p><img src="`+w+'" alt="联系.png"><img src="'+S+'" alt="联系2.png"></p><p>由图中可以看出以下几点：</p><ul><li>JDK=JRE+多种Java开发工具</li><li>JRE=JVM+各种类库</li><li>这三者的关系是一层层的嵌套关系。JDK&gt;JRE&gt;JVM</li></ul><h3 id="java和c-c-的关系和区别" tabindex="-1">Java和C/C++的关系和区别？ <a class="header-anchor" href="#java和c-c-的关系和区别" aria-label="Permalink to &quot;Java和C/C++的关系和区别？&quot;">​</a></h3><p>在了解Java和C++的关系之前，我们先熟悉一下这两门语言的概况：</p><table tabindex="0"><thead><tr><th></th><th>C++</th><th>Java</th></tr></thead><tbody><tr><td>创始人</td><td>Bjarne Stroustrup</td><td>James Gosling</td></tr><tr><td>发布时间</td><td>1983</td><td>1995</td></tr><tr><td>定位</td><td>高级语言</td><td>高级语言</td></tr><tr><td>基础</td><td>C</td><td>C++</td></tr><tr><td>特点</td><td>灵活、高效 接近底层</td><td>简洁、严谨 跨平台 严格面向对象</td></tr><tr><td>应用领域</td><td>系统编程大型应用 嵌入式 高性能场景游戏</td><td>企业级应用Web应用Android大数据</td></tr><tr><td>技术栈</td><td>计算机原理操作系统 计算机网络 数据库 数据结构与算法 面向对象技术...</td><td>计算机网络数据库 面向对象技术 高并发 分布式 Web技术栈…</td></tr></tbody></table><p><code>C++</code>： 从名字就能看出来C++是C的延续和扩展，最大的扩展就是支持了面向对象。由于C++和C的兼容性非常好而且经常以混合编程的形式出现，所以经常会把这两门语言统一称为C/C++。</p><blockquote><p>C++和C有非常亲密的关系和很好的兼容性，但并不意味着C++代码可以无差别兼容C代码。</p><ul><li>C++独有的特性C不能使用，这毋庸置疑。</li><li>C和C++在编译和语法上也会有一些差别，C++的语法更严格，混合编程需要注意这些差别带来的影响。最常见的一个例子——C和C++同名函数的编译结果不一致（诱因是C++支持重载机制）。</li><li>由于C++的语法比C更严格，C的一些编程技巧对C++不适用。相比而言，C++特性更多功能更强大，C代码更灵活、更简洁。</li></ul></blockquote><p>Java：在设计Java之前，高司令（James Gosling）试图修改、扩展C++解决当时遇到的的问题，不过后来放弃了这种思路，而直接创造了一门新语言Oak（1995年之前叫Oak，后更名为Java）。所以我们会发现Java和C++无论是语法风格还是编程思想上都有很多相似之处，可以说Java是C++的 “精简+加强” 形态。</p><blockquote><p>相同点:</p><ul><li>都是静态、强类型语言；</li><li>都支持面向对象技术；</li><li>有很多相似的特性，如泛型、lambda、foreach等；</li><li>语法风格相似；</li></ul></blockquote><blockquote><p>不同点:前面提到Java可以看成是C++的“精简+加强”形态，具体是如何“精简+加强”的呢？</p><ul><li>精简 <ul><li>基本数据类型</li><li>指针</li><li>宏</li><li>重载操作符</li><li>多重继承</li></ul></li><li>加强 <ul><li>垃圾回收</li><li>内存模型</li><li>严格面向对象</li><li>模板 --&gt; 泛型</li></ul></li></ul></blockquote><p>上面列举的是Java和C++在使用和语法特性上的一些主要差异，那么为什么会存在这些差异？难道只是为了让Java特立独行，为了证明Java与C++不一样？真正的程序员不会这么无聊，开发编程语言的大牛程序员更不会这么无聊。所以到底是为什么呢？这要从Java和C++两门语言本身的设计说起，语言本身的差异主要体现在三个方面</p><blockquote><ul><li>运行环境</li><li>内存管理方式</li><li>对面向对象技术的支持形式</li></ul></blockquote><h4 id="运行环境" tabindex="-1">运行环境 <a class="header-anchor" href="#运行环境" aria-label="Permalink to &quot;运行环境&quot;">​</a></h4><p>C++和Java代码的编译、执行过程如下：</p><blockquote><ul><li>C++ --&gt; 机器码 --&gt; 计算机。 代码被编译成二进制形式的机器码，直接在CPU执行。</li><li>Java -&gt; 字节码 --&gt; 虚拟机 --&gt; 计算机。 代码被编译成Java字节码，在Java虚拟机上执行。</li></ul></blockquote><p>可以看到Java和C++的运行环境存在很大不同，忽略编译过程，C++代码是直接在CPU上运行的，而Java代码则运行在JVM上。JVM的设计原理比较复杂，这里可以把JVM简单理解为一个解释器软件，它可以把Java字节码翻译成CPU能执行的控制命令，所以Java代码只要有JVM就能运行而不关心硬件。而C++编译生成的机器码直接和硬件交互。</p><p>也正是因为JVM的存在，让Java拥有了一些C++不具备的优秀特性，如可移植性、垃圾回收等等；同时也因为JVM的存在，让Java很难支持C++的一些强大特性，如操作内存。</p><h4 id="内存管理方式" tabindex="-1">内存管理方式 <a class="header-anchor" href="#内存管理方式" aria-label="Permalink to &quot;内存管理方式&quot;">​</a></h4><p>Java和C++的内存模型中都存在堆、栈、常量区的概念，不过它们在对象的内存分配方式和内存释放两方面存在很大的区别。</p><p>对象的内存分配方式：Java中的对象只能在堆上分配内存；C++中的对象可以在堆 、 栈 或者 静态区分配内存。</p><blockquote><ul><li>Java中创建对象的方式主要有new操作符、反射、反序列化几种方式，无论通过哪种方式创建对象，都需要在堆区申请内存分配给对象；所以在Java中，栈区一般只存放基本数据类型的变量和对象引用。</li><li>C++中创建对象的方式非常灵活：直接定义变量、new操作符、在给定内存上初始化对象。第一种方式，直接定义变量，在静态区或栈区为对象申请内存（全局变量的内存在静态区、局部变量的内存在栈区）；第二种方式，new操作符创建对象，在堆区申请内存；至于第三种方式，内存可以是指定的任意位置内存，详情参考placement new的用法。</li></ul></blockquote><p>内存释放：Java有垃圾回收机制，不需要手动释放申请的堆内存；C++中需要手动释放申请的堆内存；</p><blockquote><ul><li>Java的垃圾回收机制来自于它强大的运行环境——JVM，而不是它自身的语法特性；JVM提供了一个清洁工，我们在使用Java编程的时候可以随便制造“垃圾”并且可以完全不用管理垃圾该怎么处理，因为“清洁工”会帮我们管理。</li><li>C++没有垃圾回收机制，需要手动释放申请的堆内存；有一些编程技巧可以帮我们更方便地管理内存，甚至达到类似Java那样不用关心“垃圾”的效果，比如智能指针、RAII等技术。</li></ul></blockquote><h4 id="对面向对象技术的支持形式" tabindex="-1">对面向对象技术的支持形式 <a class="header-anchor" href="#对面向对象技术的支持形式" aria-label="Permalink to &quot;对面向对象技术的支持形式&quot;">​</a></h4><p>Java和C++虽然都支持面向对象，但是它们对面向对象的支持程度、支持方式和一些技术细节有些不一样.</p><blockquote><ul><li>支持形式不同。Java是严格的面向对象语言；C++支持面向对象，也仍然保留面向过程的语法。</li><li>继承技术不同。Java不支持多重继承、有接口的概念；C++支持多重继承，没有接口的概念；</li></ul></blockquote><blockquote><p>在Java中类是用关键字class定义的，接口是用关键字interface定义的；接口的作用是定义行为、限制类型。因为多重继承存在一些弊端如菱形继承问题，Java取消了多重继承这种特性引入接口的概念，就是为了解决这些问题</p></blockquote><h4 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h4><p>C++有7种基本数据类型，外加4个类型修饰符；Java有8种基本数据类型，外加引用类型；</p><blockquote><ul><li>C++的数据类型分为有符号和无符号两种，Java只有有符号的数值类型；</li><li>C++的某些数值类型的宽度在不同机器上是不一样的（如long int），Java的各种数值类型的宽度是固定的；</li></ul></blockquote><h4 id="泛型技术的原理" tabindex="-1">泛型技术的原理 <a class="header-anchor" href="#泛型技术的原理" aria-label="Permalink to &quot;泛型技术的原理&quot;">​</a></h4><p>Java和C++编码都支持泛型的概念，不过在C++中称为模板而不叫泛型，其实在了解C++和Java支持泛型的原理后就能理解为什么在C++叫做模板而不是泛型了。</p><ul><li>C++的模板是定义了一个类或函数的模板，在编译阶段会根据这个模板生成一个或多个同名的重载函数，至于具体生成多少个同名函数要根据调用方来确定，调用方的入参类型每多种，编译时就会多生成一个形参列表不一样的同名函数。</li></ul><blockquote><p>这也解释了为什么模板类或模板函数必须定义在头文件里，而且多次包含头文件相当于多次定义了类或函数，但编译期间不会报重复定义的错误，因为编译后就已经不是同一个函数了。</p></blockquote><ul><li>Java泛型用的是类型擦除技术，泛型类内部操作数据时会擦除入参对象的类型，把对象当做Object来操作。</li></ul><blockquote><p>所以基本数据类型不能作为泛型的类型参数，而必须要用对应的封装类型。</p></blockquote><h3 id="java常用开发工具" tabindex="-1">Java常用开发工具 <a class="header-anchor" href="#java常用开发工具" aria-label="Permalink to &quot;Java常用开发工具&quot;">​</a></h3><h3 id="java-eclipse下载安装教程" tabindex="-1">Java Eclipse下载安装教程 <a class="header-anchor" href="#java-eclipse下载安装教程" aria-label="Permalink to &quot;Java Eclipse下载安装教程&quot;">​</a></h3><h3 id="使用eclipse开发第一个java程序" tabindex="-1">使用Eclipse开发第一个Java程序 <a class="header-anchor" href="#使用eclipse开发第一个java程序" aria-label="Permalink to &quot;使用Eclipse开发第一个Java程序&quot;">​</a></h3><h3 id="修改eclipse编辑器字体大小" tabindex="-1">修改Eclipse编辑器字体大小 <a class="header-anchor" href="#修改eclipse编辑器字体大小" aria-label="Permalink to &quot;修改Eclipse编辑器字体大小&quot;">​</a></h3><h3 id="eclipse如何调试代码" tabindex="-1">Eclipse如何调试代码 <a class="header-anchor" href="#eclipse如何调试代码" aria-label="Permalink to &quot;Eclipse如何调试代码&quot;">​</a></h3><h3 id="eclipse快捷键大全" tabindex="-1">Eclipse快捷键大全 <a class="header-anchor" href="#eclipse快捷键大全" aria-label="Permalink to &quot;Eclipse快捷键大全&quot;">​</a></h3><h3 id="java-idea下载安装教程" tabindex="-1">Java IDEA下载安装教程 <a class="header-anchor" href="#java-idea下载安装教程" aria-label="Permalink to &quot;Java IDEA下载安装教程&quot;">​</a></h3><h3 id="使用idea开发第一个程序" tabindex="-1">使用IDEA开发第一个程序 <a class="header-anchor" href="#使用idea开发第一个程序" aria-label="Permalink to &quot;使用IDEA开发第一个程序&quot;">​</a></h3><h3 id="idea-常用快捷键" tabindex="-1">IDEA 常用快捷键 <a class="header-anchor" href="#idea-常用快捷键" aria-label="Permalink to &quot;IDEA 常用快捷键&quot;">​</a></h3><h3 id="idea-调试代码" tabindex="-1">IDEA 调试代码 <a class="header-anchor" href="#idea-调试代码" aria-label="Permalink to &quot;IDEA 调试代码&quot;">​</a></h3><h3 id="java初学者容易犯的错误" tabindex="-1">Java初学者容易犯的错误 <a class="header-anchor" href="#java初学者容易犯的错误" aria-label="Permalink to &quot;Java初学者容易犯的错误&quot;">​</a></h3><h3 id="java程序员学习路线" tabindex="-1">Java程序员学习路线 <a class="header-anchor" href="#java程序员学习路线" aria-label="Permalink to &quot;Java程序员学习路线&quot;">​</a></h3><h3 id="主流的java-web-开发框架" tabindex="-1">主流的Java Web 开发框架 <a class="header-anchor" href="#主流的java-web-开发框架" aria-label="Permalink to &quot;主流的Java Web 开发框架&quot;">​</a></h3>',93),H=[R];function O(I,W,T,L,U,N){return l(),i("div",null,H)}const Q=a(F,[["render",O]]);export{z as __pageData,Q as default};
